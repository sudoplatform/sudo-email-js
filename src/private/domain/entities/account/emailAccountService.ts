import { CachePolicy } from '@sudoplatform/sudo-common'
import { UpdateEmailAddressMetadataInput } from '../../../../public'
import { EmailAddressFilter } from '../../../../public/typings/filter'
import { EmailAccountEntity } from './emailAccountEntity'
import { EmailAddressEntity } from './emailAddressEntity'
import { EmailDomainEntity } from './emailDomainEntity'

/**
 * Input for `EmailAccountService.create` method.
 *
 * @interface CreateEmailAccountInput
 * @property {EmailAddressEntity} emailAddressEntity The email address to provision.
 * @property {string} ownershipProofToken A signed ownership proof for the specified owners.
 */
export interface CreateEmailAccountInput {
  emailAddressEntity: EmailAddressEntity
  ownershipProofToken: string
}

/**
 * Input for `EmailAccountService.delete` method.
 *
 * @interface DeleteEmailAccountInput
 * @property {string} emailAddressId The identifier of the email address to deprovision.
 */
export interface DeleteEmailAccountInput {
  emailAddressId: string
}

/**
 * Input for `EmailAccountService.updateEmailAddressMetadata` method.
 *
 * @interface UpdateEmailAccountMetadataInput
 * @property {String} id The id of the email address to update.
 * @property values The new value(s) to set for each listed email account.
 */
export interface UpdateEmailAccountMetadataInput {
  id: string
  values: {
    alias?: string
  }
}

/**
 * Input for `EmailAccountService.get` method.
 *
 * @interface GetEmailAccountInput
 * @property {string} id The identifier of the email account.
 * @property {CachePolicy} cachePolicy Cache policy determines the strategy for accessing the email account records.
 */
export interface GetEmailAccountInput {
  id: string
  cachePolicy?: CachePolicy
}

/**
 * Input for `EmailAccountService.list` method.
 *
 * @interface ListEmailAccountsInput
 * @property {CachePolicy} cachePolicy Cache policy determines the strategy for accessing the email account records.
 * @property {EmailAddressFilter} filter Only records that match this filter will be returned.
 * @property {number} limit Number of records to return. If omitted, the limit defaults to 10.
 * @property {string} nextToken A token generated by a previous call to `EmailAccountService.list`.
 * This allows for pagination.
 */
export interface ListEmailAccountsInput {
  cachePolicy?: CachePolicy
  filter?: EmailAddressFilter
  limit?: number
  nextToken?: string
}

/**
 * Input for `EmailAccountService.listForSudoId` method.
 *
 * @interface ListEmailAccountsForSudoIdInput
 * @property {string} sudoId The identifier of the sudo owner associated with the email accounts.
 * @property {CachePolicy} cachePolicy Cache policy determines the strategy for accessing the email account records.
 * @property {EmailAddressFilter} filter Only records that match this filter will be returned.
 * @property {number} limit Number of records to return. If omitted, the limit defaults to 10.
 * @property {string} nextToken A token generated by a previous call to `EmailAccountService.listForSudoId`.
 * This allows for pagination.
 */
export interface ListEmailAccountsForSudoIdInput {
  sudoId: string
  cachePolicy?: CachePolicy
  filter?: EmailAddressFilter
  limit?: number
  nextToken?: string
}

/**
 * Output for `EmailAccountService.list` and `EmailAccountService.listForSudoId` methods.
 *
 * @interface ListEmailAccountsOutput
 * @property {EmailAccountEntity[]} emailAccounts The list of email accounts retrieved in this query.
 * @property {string} nextToken A token generated by a previous call. This allows for pagination.
 */
export interface ListEmailAccountsOutput {
  emailAccounts: EmailAccountEntity[]
  nextToken?: string
}

/**
 * Input for `EmailAccountService.checkAvailability` method.
 *
 * @interface CheckEmailAddressAvailabilityInput
 * @property {string[]} localParts The local parts of the email address to check.
 * @property {EmailDomainEntity[]} domains The domains of the email address to check.
 */
export interface CheckEmailAddressAvailabilityInput {
  localParts: string[]
  domains?: EmailDomainEntity[]
}

/**
 * Input for `EmailAccountService.getSupportedEmailDomains` method.
 *
 * @interface GetSuppoortedEmailDomainsInput
 * @property {CachePolicy} cachePolicy Cache policy determines the strategy for accessing the supported email domains.
 */
export interface GetSupportedEmailDomainsInput {
  cachePolicy?: CachePolicy
}

/**
 * Core entity representation of an email account service used in business logic. Used to perfrom CRUD operations for email accounts.
 *
 * @interface EmailAccountService
 */
export interface EmailAccountService {
  /**
   * Create an email account.
   *
   * @param {CreateEmailAccountInput} input Parameters used to create an email account.
   * @returns {EmailAccountEntity} The email account that was created.
   */
  create(input: CreateEmailAccountInput): Promise<EmailAccountEntity>

  /**
   * Delete an email account.
   *
   * @param {DeleteEmailAccountInput} input Parameters used to delete an email account.
   * @returns {EmailAccountEntity} The email account that was deleted.
   */
  delete(input: DeleteEmailAccountInput): Promise<EmailAccountEntity>

  /**
   * Update email account metadata.
   *
   * @param {UpdateEmailAddressMetadataInput} input Parameters used to update the metadata of an email account.
   * @returns {string} The identifier of the email account that was updated.
   */
  updateMetadata(input: UpdateEmailAddressMetadataInput): Promise<string>

  /**
   * Get an email account.
   *
   * @param {GetEmailAccountInput} input Parameters used to retrieve an email account.
   * @returns {EmailAccountEntity | undefined} The email account, or undefined if not found.
   */
  get(input: GetEmailAccountInput): Promise<EmailAccountEntity | undefined>

  /**
   * List email accounts.
   *
   * @param {ListEmailAccountsInput} input Parameters used to list email accounts.
   * @returns {ListEmailAccountsOutput} The list of any email accounts. Can be empty if no accounts found.
   */
  list(input?: ListEmailAccountsInput): Promise<ListEmailAccountsOutput>

  /**
   * List email accounts associated with the sudo owner.
   *
   * @param {ListEmailAccountsForSudoIdInput} input Parameters used to list email accounts for a sudo owner.
   * @returns {ListEmailAccountsOutput} The list of any email accounts. Can be empty if no accounts found.
   */
  listForSudoId(
    input: ListEmailAccountsForSudoIdInput,
  ): Promise<ListEmailAccountsOutput>

  /**
   * Check if an email address is available to be created within a domain.
   *
   * @param {CheckEmailAddressAvailabilityInput} input Parameters used to check the availability of an email address.
   * @returns {EmailAddressEntity[]} The list of email addresses that are available.
   */
  checkAvailability(
    input: CheckEmailAddressAvailabilityInput,
  ): Promise<EmailAddressEntity[]>

  /**
   * Get the supported email domains.
   *
   * @param {GetSupportedEmailDomainsInput} input Parameters used to retrieve the list of supported email domains.
   * @returns {EmailDomainEntity[]} The list of supported email domains.
   */
  getSupportedEmailDomains(
    input: GetSupportedEmailDomainsInput,
  ): Promise<EmailDomainEntity[]>
}
