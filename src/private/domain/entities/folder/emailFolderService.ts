/**
 * Copyright Â© 2025 Anonyome Labs, Inc. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import { CachePolicy } from '@sudoplatform/sudo-common'
import { EmailFolderEntity } from './emailFolderEntity'

/**
 * Input for `EmailFolderService.listEmailFoldersForEmailAddressId` method.
 *
 * @interface ListEmailFoldersForEmailAddressIdInput
 * @property {string} emailAddressId The identifier of the email address associated with the email folders.
 * @property {CachePolicy} cachePolicy Cache policy determines the strategy for accessing the folder records.
 * @property {number} limit Number of records to return. If omitted, the limit defaults to 10.
 * @property {string} nextToken A token generated by a previous call to listEmailFoldersForEmailAddressId.
 */
export interface ListEmailFoldersForEmailAddressIdInput {
  emailAddressId: string
  cachePolicy?: CachePolicy
  limit?: number
  nextToken?: string
}

/**
 * Output for `EmailFolderService.listEmailFoldersForEmailAddressIdOutput` method.
 *
 * @interface ListEmailFoldersForEmailAddressIdOutput
 * @property {EmailFolderEntity[]} folders The list of email folders retrieved in this query.
 * @property {string} nextToken A token generated by a previous call. This allows for pagination.
 */
export interface ListEmailFoldersForEmailAddressIdOutput {
  folders: EmailFolderEntity[]
  nextToken?: string
}

/**
 * Input for `EmailFolderService.createCustomEmailFolderForEmailAddressId` method.
 *
 * @interface CreateCustomEmailFolderForEmailAddressIdInput
 * @property {string} emailAddressId The identifier of the email address associated with the custom email folder.
 * @property {string} customFolderName The name of the custom email folder to be created.
 */
export interface CreateCustomEmailFolderForEmailAddressIdInput {
  emailAddressId: string
  customFolderName: string
}

/**
 * Input for `EmailFolderService.deleteCustomEmailFolderForEmailAddressId` method.
 *
 * @interface DeleteCustomEmailFolderForEmailAddressIdInput
 * @property {string} emailFolderId The identifier of the email folder to delete.
 * @property {string} emailAddressId The identifier of the email address associated with the folder.
 */
export interface DeleteCustomEmailFolderForEmailAddressIdInput {
  emailFolderId: string
  emailAddressId: string
}

interface CustomEmailFolderUpdateValuesInput {
  customFolderName?: string
}

/**
 * Input for `EmailFolderService.updateCustomEmailFolderForEmailAddressId`.
 *
 * @interface UpdateCustomEmailFolderForEmailAddressIdInput
 * @property {string} emailFolderId The identifier of the email folder to update
 * @property {string} emailAddressId The identifier of the email address associated with the folder.
 * @property {CustomEmailFolderUpdateValuesInput} values The values to update
 */
export interface UpdateCustomEmailFolderForEmailAddressIdInput {
  emailFolderId: string
  emailAddressId: string
  values: CustomEmailFolderUpdateValuesInput
}

/**
 * Input for `EmailFolderService.deleteMessagesByFolderId`.
 *
 * @interface DeleteMessagesByFolderIdInput
 * @property {string} emailFolderId The identifier of the folder to delete messages from
 * @property {string} emailAddressId The identifier of the email address associated with the folder.
 * @property {boolean} hardDelete If true (default), messages will be completely deleted. If false, messages will be moved to TRASH, unless the folder itself is TRASH.
 */
export interface DeleteMessagesByFolderIdInput {
  emailFolderId: string
  emailAddressId: string
  hardDelete?: boolean
}

/**
 * Core entity representation of an email folder service used in business logic. Used to perform operations for email folders.
 *
 * @interface EmailFolderService
 */
export interface EmailFolderService {
  /**
   * List the email folders from the service associated with the emailAddressId.
   *
   * @param {ListEmailFoldersForEmailAddressIdInput} input Parameters used to get a list of email folders for an email address.
   * @returns {ListEmailFoldersForEmailAddressIdOutput} The list of any email folders. Can be empty if no folders found.
   */
  listEmailFoldersForEmailAddressId(
    input: ListEmailFoldersForEmailAddressIdInput,
  ): Promise<ListEmailFoldersForEmailAddressIdOutput>

  /**
   * Create a custom email folder for the email address associated with the emailAddressId.
   *
   * @param {CreateCustomEmailFolderForEmailAddressIdInput} input Parameters used to create a custom email folder for an email address.
   * @returns {EmailFolderEntity} The custom email folder.
   */
  createCustomEmailFolderForEmailAddressId(
    input: CreateCustomEmailFolderForEmailAddressIdInput,
  ): Promise<EmailFolderEntity>

  /**
   * Delete a custom email folder for the email address associated with the emailAddressId.
   *
   * @param {DeleteCustomEmailFolderForEmailAddressIdInput} input Parameters used to delete a custom email folder for an email address.
   * @return {EmailFolderEntity | undefined} The custom email folder.
   */
  deleteCustomEmailFolderForEmailAddressId(
    input: DeleteCustomEmailFolderForEmailAddressIdInput,
  ): Promise<EmailFolderEntity | undefined>

  /**
   * Update a custom email folder for the email address associated with the emailAddressId.
   *
   * @param {UpdateCustomEmailFolderForEmailAddressIdInput} input Parameters used to update a custom email folder for an email address.
   * @return {EmailFolderEntity} The updated custom email folder
   */
  updateCustomEmailFolderForEmailAddressId(
    input: UpdateCustomEmailFolderForEmailAddressIdInput,
  ): Promise<EmailFolderEntity>

  /**
   * Delete all messages from a folder with the given folderId
   *
   * @param {DeleteMessagesByFolderIdInput} input Parameters used to delete messages from a folder
   * @return {string} The id of the folder
   */
  deleteMessagesByFolderId(
    input: DeleteMessagesByFolderIdInput,
  ): Promise<string>
}
