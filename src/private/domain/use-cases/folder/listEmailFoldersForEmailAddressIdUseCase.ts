import { CachePolicy, DefaultLogger } from '@sudoplatform/sudo-common'
import { EmailFolderFilter } from '../../../..'
import { EmailFolderService } from '../../entities/folder/emailFolderService'

/**
 * Input for `ListEmailFoldersForEmailAddressIdUseCase` use case.
 *
 * @interface ListEmailFoldersForEmailAddressIdUseCaseInput
 * @property {string} emailAddressId The identifier of the email address associated with the email folders.
 * @property {CachePolicy} cachePolicy Cache policy determines the strategy for accessing the folder records.
 * @property {EmailAddressFilter} filter Only records that match this filter will be returned.
 * @property {number} limit Number of records to return. If omitted, the limit defaults to 10.
 * @property {string} nextToken A token generated by a previous call. This allows for pagination.
 */
interface ListEmailFoldersForEmailAddressIdUseCaseInput {
  emailAddressId: string
  cachePolicy: CachePolicy
  filter?: EmailFolderFilter | undefined
  limit?: number | undefined
  nextToken?: string | undefined
}

/**
 * Output for `ListEmailFoldersForEmailAddressIdUseCase` use case.
 *
 * @property {Array} folders The list of email folders retrieved in this use case.
 * @property {string} nextToken A token generated by a previous call. This allows for pagination.
 */
interface ListEmailFoldersForEmailAddressIdUseCaseOutput {
  folders: Array<{
    id: string
    owner: string
    owners: Array<{ id: string; issuer: string }>
    emailAddressId: string
    folderName: string
    size: number
    unseenCount: number
    ttl?: number
    version: number
    createdAt: Date
    updatedAt: Date
  }>
  nextToken?: string
}

/**
 * Application business logic for listing email folders.
 */
export class ListEmailFoldersForEmailAddressIdUseCase {
  private readonly log = new DefaultLogger(this.constructor.name)
  constructor(private readonly emailFolderService: EmailFolderService) {}

  async execute({
    emailAddressId,
    cachePolicy,
    filter,
    limit,
    nextToken,
  }: ListEmailFoldersForEmailAddressIdUseCaseInput): Promise<ListEmailFoldersForEmailAddressIdUseCaseOutput> {
    this.log.debug(this.constructor.name, {
      emailAddressId,
      cachePolicy,
      filter,
      limit,
      nextToken,
    })
    return await this.emailFolderService.listEmailFoldersForEmailAddressId({
      emailAddressId,
      cachePolicy,
      filter,
      limit,
      nextToken,
    })
  }
}
