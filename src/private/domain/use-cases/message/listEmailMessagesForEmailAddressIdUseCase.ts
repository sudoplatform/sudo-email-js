import { CachePolicy, DefaultLogger } from '@sudoplatform/sudo-common'
import { DateRange } from '../../../../public/typings/dateRange'
import { Direction, State } from '../../../../public/typings/emailMessage'
import { EmailMessageFilter } from '../../../../public/typings/filter'
import { SortOrder } from '../../../../public/typings/sortOrder'
import { EmailMessageService } from '../../entities/message/emailMessageService'

/**
 * Input for `ListEmailMessagesForEmailAddressIdUseCase` use case.
 *
 * @interface ListEmailMessagesForEmailAddresssIdUseCaseInput
 * @property {string} emailAddressId The identifier of the email address associated with the email messages.
 * @property {CachePolicy} cachePolicy Cache policy determines the strategy for accessing the email message records.
 * @property {DateRange} dateRange Email messages created within the date range inclusive will be fetched.
 * @property {EmailMessageFilter} filter Only records that match this filter will be returned.
 * @property {number} limit Number of records to return. If omitted, the limit defaults to 10.
 * @property {SortOrder} sortOrder The direction in which the email messages are sorted. Defaults to descending.
 * @property {string} nextToken A token generated by a previous call. This allows for pagination.
 */
interface ListEmailMessagesForEmailAddressIdUseCaseInput {
  emailAddressId: string
  cachePolicy: CachePolicy
  dateRange?: DateRange | undefined
  filter?: EmailMessageFilter | undefined
  limit?: number | undefined
  sortOrder?: SortOrder | undefined
  nextToken?: string | undefined
}

/**
 * Output for `ListEmailMessagesForEmailAddressIdUseCase` use case.
 *
 * @property {Array} emailMessages The list of email messages retrieved in this use case.
 * @property {string} nextToken A token generated by a previous call. This allows for pagination.
 */
interface ListEmailMessagesForEmailAddressIdUseCaseOutput {
  emailMessages: Array<{
    id: string
    owner: string
    owners: Array<{ id: string; issuer: string }>
    emailAddressId: string
    keyId: string
    algorithm: string
    folderId: string
    seen: boolean
    direction: Direction
    state: State
    clientRefId?: string
    from: Array<{ emailAddress: string; displayName?: string }>
    to: Array<{ emailAddress: string; displayName?: string }>
    cc: Array<{ emailAddress: string; displayName?: string }>
    bcc: Array<{ emailAddress: string; displayName?: string }>
    replyTo: Array<{ emailAddress: string; displayName?: string }>
    subject?: string
    version: number
    sortDate: Date
    createdAt: Date
    updatedAt: Date
    status: { type: 'Completed' } | { type: 'Failed'; cause: Error }
  }>
  nextToken?: string
}

/**
 * Application business logic for listing email messages for an email address id.
 */
export class ListEmailMessagesForEmailAddressIdUseCase {
  private readonly log = new DefaultLogger(this.constructor.name)
  constructor(private readonly emailMessageService: EmailMessageService) {}

  async execute({
    emailAddressId,
    cachePolicy,
    dateRange,
    filter,
    limit,
    sortOrder,
    nextToken,
  }: ListEmailMessagesForEmailAddressIdUseCaseInput): Promise<ListEmailMessagesForEmailAddressIdUseCaseOutput> {
    this.log.debug(this.constructor.name, {
      emailAddressId,
      cachePolicy,
      dateRange,
      filter,
      limit,
      sortOrder,
      nextToken,
    })
    return await this.emailMessageService.listMessagesForEmailAddressId({
      emailAddressId,
      cachePolicy,
      dateRange,
      filter,
      limit,
      sortOrder,
      nextToken,
    })
  }
}
