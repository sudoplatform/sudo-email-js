/**
 * Copyright Â© 2025 Anonyome Labs, Inc. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import { CachePolicy, DefaultLogger, Logger } from '@sudoplatform/sudo-common'
import { Direction, State } from '../../../../public/typings/emailMessage'
import { EmailMessageDateRange } from '../../../../public/typings/emailMessageDateRange'
import { SortOrder } from '../../../../public/typings/sortOrder'
import { EmailMessageService } from '../../entities/message/emailMessageService'
import { EncryptionStatus } from '../../../../public'

/**
 * Input for `ListEmailMessagesUseCase` use case.
 *
 * @interface ListEmailMessagesUseCaseInput
 * @property {EmailMessageDateRange} dateRange Email messages matching the specified date range inclusive will be fetched.
 * @property {CachePolicy} cachePolicy Cache policy determines the strategy for accessing the email message records.
 * @property {number} limit Number of records to return. If omitted, the limit defaults to 10.
 * @property {SortOrder} sortOrder The direction in which the email messages are sorted. Defaults to descending.
 * @property {string} nextToken A token generated by a previous call. This allows for pagination.
 * @property {boolean} includeDeletedMessages A flag to indicate if deleted messages should be included. Defaults to false.
 */
interface ListEmailMessagesUseCaseInput {
  dateRange?: EmailMessageDateRange | undefined
  cachePolicy?: CachePolicy
  limit?: number | undefined
  sortOrder?: SortOrder | undefined
  nextToken?: string | undefined
  includeDeletedMessages?: boolean | undefined
}

/**
 * Output for `ListEmailMessagesUseCase` use case.
 *
 * @property {Array} emailMessages The list of email messages retrieved in this use case.
 * @property {string} nextToken A token generated by a previous call. This allows for pagination.
 */
interface ListEmailMessagesUseCaseOutput {
  emailMessages: Array<{
    id: string
    owner: string
    owners: Array<{ id: string; issuer: string }>
    emailAddressId: string
    keyId: string
    algorithm: string
    folderId: string
    previousFolderId?: string
    seen: boolean
    repliedTo: boolean
    forwarded: boolean
    direction: Direction
    state: State
    clientRefId?: string
    from: Array<{ emailAddress: string; displayName?: string }>
    to: Array<{ emailAddress: string; displayName?: string }>
    cc: Array<{ emailAddress: string; displayName?: string }>
    bcc: Array<{ emailAddress: string; displayName?: string }>
    replyTo: Array<{ emailAddress: string; displayName?: string }>
    subject?: string
    hasAttachments: boolean
    version: number
    sortDate: Date
    createdAt: Date
    updatedAt: Date
    status: { type: 'Completed' } | { type: 'Failed'; cause: Error }
    size: number
    encryptionStatus: EncryptionStatus
    date?: Date
  }>
  nextToken?: string
}

/**
 * Application business logic for listing all email messages for a user.
 */
export class ListEmailMessagesUseCase {
  private readonly log: Logger

  constructor(private readonly emailMessageService: EmailMessageService) {
    this.log = new DefaultLogger(this.constructor.name)
  }

  async execute({
    dateRange,
    cachePolicy,
    limit,
    sortOrder,
    nextToken,
    includeDeletedMessages,
  }: ListEmailMessagesUseCaseInput): Promise<ListEmailMessagesUseCaseOutput> {
    this.log.debug(this.constructor.name, {
      dateRange,
      cachePolicy,
      limit,
      sortOrder,
      nextToken,
      includeDeletedMessages,
    })
    return await this.emailMessageService.listMessages({
      dateRange,
      cachePolicy,
      limit,
      sortOrder,
      nextToken,
      includeDeletedMessages,
    })
  }
}
