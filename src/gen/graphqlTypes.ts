// Sourcecode generated by graphql-codegen. DO NOT EDIT!
/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  AWSDate: any
  AWSDateTime: any
  AWSEmail: any
  AWSIPAddress: any
  AWSJSON: any
  AWSPhone: any
  AWSTime: any
  AWSTimestamp: any
  AWSURL: any
}

export type AvailableAddresses = {
  __typename?: 'AvailableAddresses'
  addresses: Array<Scalars['String']>
}

export type BlockEmailAddressesBulkUpdateResult = {
  __typename?: 'BlockEmailAddressesBulkUpdateResult'
  failedAddresses?: Maybe<Array<Scalars['String']>>
  status: UpdateEmailMessagesStatus
  successAddresses?: Maybe<Array<Scalars['String']>>
}

export type BlockEmailAddressesInput = {
  blockedAddresses: Array<BlockedEmailAddressInput>
  owner: Scalars['ID']
}

export enum BlockedAddressHashAlgorithm {
  Sha256 = 'SHA256',
}

export type BlockedEmailAddress = {
  __typename?: 'BlockedEmailAddress'
  createdAtEpochMs: Scalars['Float']
  hashAlgorithm: BlockedAddressHashAlgorithm
  hashedBlockedValue: Scalars['String']
  owner: Scalars['ID']
  owners: Array<Owner>
  sealedValue: SealedAttribute
  updatedAtEpochMs: Scalars['Float']
  version: Scalars['Int']
}

export type BlockedEmailAddressInput = {
  hashAlgorithm: BlockedAddressHashAlgorithm
  hashedBlockedValue: Scalars['String']
  sealedValue: SealedAttributeInput
}

export type CheckEmailAddressAvailabilityInput = {
  domains?: InputMaybe<Array<Scalars['String']>>
  localParts: Array<Scalars['String']>
}

export type CreateCustomEmailFolderInput = {
  customFolderName: SealedAttributeInput
  emailAddressId: Scalars['ID']
}

export type CreatePublicKeyInput = {
  algorithm: Scalars['String']
  keyFormat?: InputMaybe<KeyFormat>
  keyId: Scalars['String']
  keyRingId: Scalars['String']
  publicKey: Scalars['String']
}

export type DateRangeInput = {
  endDateEpochMs: Scalars['Float']
  startDateEpochMs: Scalars['Float']
}

export type DeleteEmailMessageInput = {
  messageId: Scalars['ID']
}

export type DeleteEmailMessagesInput = {
  messageIds: Array<Scalars['ID']>
}

export type DeprovisionEmailAddressInput = {
  emailAddressId: Scalars['ID']
}

export type EmailAddress = {
  __typename?: 'EmailAddress'
  alias?: Maybe<SealedAttribute>
  createdAtEpochMs: Scalars['Float']
  emailAddress: Scalars['String']
  folders: Array<EmailFolder>
  id: Scalars['ID']
  identityId: Scalars['ID']
  keyIds: Array<Scalars['String']>
  keyRingId: Scalars['ID']
  lastReceivedAtEpochMs?: Maybe<Scalars['Float']>
  owner: Scalars['ID']
  owners: Array<Owner>
  size: Scalars['Float']
  updatedAtEpochMs: Scalars['Float']
  version: Scalars['Int']
}

export type EmailAddressConnection = {
  __typename?: 'EmailAddressConnection'
  items: Array<EmailAddress>
  nextToken?: Maybe<Scalars['String']>
}

export type EmailAddressMetadataUpdateValuesInput = {
  alias?: InputMaybe<SealedAttributeInput>
}

export type EmailAddressPublicInfo = {
  __typename?: 'EmailAddressPublicInfo'
  emailAddress: Scalars['String']
  publicKey: Scalars['String']
}

export type EmailConfigurationData = {
  __typename?: 'EmailConfigurationData'
  deleteEmailMessagesLimit: Scalars['Int']
  emailMessageMaxInboundMessageSize: Scalars['Int']
  emailMessageMaxOutboundMessageSize: Scalars['Int']
  updateEmailMessagesLimit: Scalars['Int']
}

export type EmailFolder = {
  __typename?: 'EmailFolder'
  createdAtEpochMs: Scalars['Float']
  customFolderName?: Maybe<SealedAttribute>
  emailAddressId: Scalars['ID']
  folderName: Scalars['String']
  id: Scalars['ID']
  owner: Scalars['ID']
  owners: Array<Owner>
  size: Scalars['Float']
  ttl?: Maybe<Scalars['Float']>
  unseenCount: Scalars['Float']
  updatedAtEpochMs: Scalars['Float']
  version: Scalars['Int']
}

export type EmailFolderConnection = {
  __typename?: 'EmailFolderConnection'
  items: Array<EmailFolder>
  nextToken?: Maybe<Scalars['String']>
}

export type EmailMessageConnection = {
  __typename?: 'EmailMessageConnection'
  items: Array<SealedEmailMessage>
  nextToken?: Maybe<Scalars['String']>
}

export enum EmailMessageDirection {
  Inbound = 'INBOUND',
  Outbound = 'OUTBOUND',
}

export enum EmailMessageState {
  Delivered = 'DELIVERED',
  Failed = 'FAILED',
  Queued = 'QUEUED',
  Received = 'RECEIVED',
  Sent = 'SENT',
  Undelivered = 'UNDELIVERED',
}

export type EmailMessageUpdateValuesInput = {
  folderId?: InputMaybe<Scalars['ID']>
  seen?: InputMaybe<Scalars['Boolean']>
}

export type GetEmailAddressBlocklistInput = {
  owner: Scalars['ID']
}

export type GetEmailAddressBlocklistResponse = {
  __typename?: 'GetEmailAddressBlocklistResponse'
  sealedBlockedAddresses: Array<SealedAttribute>
}

export enum KeyFormat {
  RsaPublicKey = 'RSA_PUBLIC_KEY',
  Spki = 'SPKI',
}

export type ListEmailAddressesForSudoIdInput = {
  limit?: InputMaybe<Scalars['Int']>
  nextToken?: InputMaybe<Scalars['String']>
  sudoId: Scalars['ID']
}

export type ListEmailAddressesInput = {
  limit?: InputMaybe<Scalars['Int']>
  nextToken?: InputMaybe<Scalars['String']>
}

export type ListEmailFoldersForEmailAddressIdInput = {
  emailAddressId: Scalars['ID']
  limit?: InputMaybe<Scalars['Int']>
  nextToken?: InputMaybe<Scalars['String']>
}

export type ListEmailMessagesForEmailAddressIdInput = {
  dateRange?: InputMaybe<DateRangeInput>
  emailAddressId: Scalars['ID']
  limit?: InputMaybe<Scalars['Int']>
  nextToken?: InputMaybe<Scalars['String']>
  sortOrder?: InputMaybe<SortOrder>
}

export type ListEmailMessagesForEmailFolderIdInput = {
  dateRange?: InputMaybe<DateRangeInput>
  folderId: Scalars['ID']
  limit?: InputMaybe<Scalars['Int']>
  nextToken?: InputMaybe<Scalars['String']>
  sortOrder?: InputMaybe<SortOrder>
}

export type LookupEmailAddressesPublicInfoInput = {
  emailAddresses: Array<Scalars['String']>
}

export type LookupEmailAddressesPublicInfoResponse = {
  __typename?: 'LookupEmailAddressesPublicInfoResponse'
  items: Array<EmailAddressPublicInfo>
}

export type Mutation = {
  __typename?: 'Mutation'
  blockEmailAddresses: BlockEmailAddressesBulkUpdateResult
  createCustomEmailFolder: EmailFolder
  createPublicKeyForEmail: PublicKey
  deleteEmailMessage: Scalars['ID']
  deleteEmailMessages: Array<Scalars['ID']>
  deprovisionEmailAddress: EmailAddress
  provisionEmailAddress: EmailAddress
  sendEmailMessage: Scalars['ID']
  unblockEmailAddresses: BlockEmailAddressesBulkUpdateResult
  updateEmailAddressMetadata: Scalars['ID']
  updateEmailMessages: UpdateEmailMessagesResult
}

export type MutationBlockEmailAddressesArgs = {
  input: BlockEmailAddressesInput
}

export type MutationCreateCustomEmailFolderArgs = {
  input: CreateCustomEmailFolderInput
}

export type MutationCreatePublicKeyForEmailArgs = {
  input: CreatePublicKeyInput
}

export type MutationDeleteEmailMessageArgs = {
  input: DeleteEmailMessageInput
}

export type MutationDeleteEmailMessagesArgs = {
  input: DeleteEmailMessagesInput
}

export type MutationDeprovisionEmailAddressArgs = {
  input: DeprovisionEmailAddressInput
}

export type MutationProvisionEmailAddressArgs = {
  input: ProvisionEmailAddressInput
}

export type MutationSendEmailMessageArgs = {
  input: SendEmailMessageInput
}

export type MutationUnblockEmailAddressesArgs = {
  input: UnblockEmailAddressesInput
}

export type MutationUpdateEmailAddressMetadataArgs = {
  input: UpdateEmailAddressMetadataInput
}

export type MutationUpdateEmailMessagesArgs = {
  input: UpdateEmailMessagesInput
}

export type Owner = {
  __typename?: 'Owner'
  id: Scalars['String']
  issuer: Scalars['String']
}

export type OwnerInput = {
  id: Scalars['String']
  issuer: Scalars['String']
}

export type PaginatedPublicKey = {
  __typename?: 'PaginatedPublicKey'
  items: Array<PublicKey>
  nextToken?: Maybe<Scalars['String']>
}

export type ProvisionEmailAddressInput = {
  alias?: InputMaybe<SealedAttributeInput>
  emailAddress: Scalars['String']
  key: ProvisionEmailAddressPublicKeyInput
  ownershipProofTokens: Array<Scalars['String']>
}

export type ProvisionEmailAddressPublicKeyInput = {
  algorithm: Scalars['String']
  keyFormat?: InputMaybe<KeyFormat>
  keyId: Scalars['String']
  publicKey: Scalars['String']
}

export type PublicKey = {
  __typename?: 'PublicKey'
  algorithm: Scalars['String']
  createdAtEpochMs: Scalars['Float']
  id: Scalars['ID']
  keyFormat?: Maybe<KeyFormat>
  keyId: Scalars['String']
  keyRingId: Scalars['String']
  owner: Scalars['ID']
  publicKey: Scalars['String']
  updatedAtEpochMs: Scalars['Float']
  version: Scalars['Int']
}

export type Query = {
  __typename?: 'Query'
  checkEmailAddressAvailability: AvailableAddresses
  getEmailAddress?: Maybe<EmailAddress>
  getEmailAddressBlocklist: GetEmailAddressBlocklistResponse
  getEmailConfig: EmailConfigurationData
  getEmailDomains: SupportedDomains
  getEmailMessage?: Maybe<SealedEmailMessage>
  getKeyRingForEmail: PaginatedPublicKey
  getPublicKeyForEmail?: Maybe<PublicKey>
  getPublicKeysForEmail: PaginatedPublicKey
  listEmailAddresses: EmailAddressConnection
  listEmailAddressesForSudoId: EmailAddressConnection
  listEmailFoldersForEmailAddressId: EmailFolderConnection
  listEmailMessagesForEmailAddressId: EmailMessageConnection
  listEmailMessagesForEmailFolderId: EmailMessageConnection
  lookupEmailAddressesPublicInfo: LookupEmailAddressesPublicInfoResponse
}

export type QueryCheckEmailAddressAvailabilityArgs = {
  input: CheckEmailAddressAvailabilityInput
}

export type QueryGetEmailAddressArgs = {
  id: Scalars['String']
}

export type QueryGetEmailAddressBlocklistArgs = {
  input: GetEmailAddressBlocklistInput
}

export type QueryGetEmailMessageArgs = {
  id: Scalars['ID']
}

export type QueryGetKeyRingForEmailArgs = {
  keyRingId: Scalars['String']
  limit?: InputMaybe<Scalars['Int']>
  nextToken?: InputMaybe<Scalars['String']>
}

export type QueryGetPublicKeyForEmailArgs = {
  keyId: Scalars['String']
}

export type QueryGetPublicKeysForEmailArgs = {
  limit?: InputMaybe<Scalars['Int']>
  nextToken?: InputMaybe<Scalars['String']>
}

export type QueryListEmailAddressesArgs = {
  input: ListEmailAddressesInput
}

export type QueryListEmailAddressesForSudoIdArgs = {
  input: ListEmailAddressesForSudoIdInput
}

export type QueryListEmailFoldersForEmailAddressIdArgs = {
  input: ListEmailFoldersForEmailAddressIdInput
}

export type QueryListEmailMessagesForEmailAddressIdArgs = {
  input: ListEmailMessagesForEmailAddressIdInput
}

export type QueryListEmailMessagesForEmailFolderIdArgs = {
  input: ListEmailMessagesForEmailFolderIdInput
}

export type QueryLookupEmailAddressesPublicInfoArgs = {
  input: LookupEmailAddressesPublicInfoInput
}

export type S3EmailObjectInput = {
  bucket: Scalars['String']
  key: Scalars['String']
  region: Scalars['String']
}

export type SealedAttribute = {
  __typename?: 'SealedAttribute'
  algorithm: Scalars['String']
  base64EncodedSealedData: Scalars['String']
  keyId: Scalars['String']
  plainTextType: Scalars['String']
}

export type SealedAttributeInput = {
  algorithm: Scalars['String']
  base64EncodedSealedData: Scalars['String']
  keyId: Scalars['String']
  plainTextType: Scalars['String']
}

export type SealedEmailMessage = {
  __typename?: 'SealedEmailMessage'
  clientRefId?: Maybe<Scalars['String']>
  createdAtEpochMs: Scalars['Float']
  direction: EmailMessageDirection
  emailAddressId: Scalars['ID']
  folderId: Scalars['ID']
  id: Scalars['ID']
  owner: Scalars['ID']
  owners: Array<Owner>
  previousFolderId?: Maybe<Scalars['ID']>
  rfc822Header: SealedAttribute
  seen: Scalars['Boolean']
  size: Scalars['Float']
  sortDateEpochMs: Scalars['Float']
  state: EmailMessageState
  updatedAtEpochMs: Scalars['Float']
  version: Scalars['Int']
}

export type SendEmailMessageInput = {
  clientRefId?: InputMaybe<Scalars['String']>
  emailAddressId: Scalars['ID']
  message: S3EmailObjectInput
}

export enum SortOrder {
  Asc = 'ASC',
  Desc = 'DESC',
}

export type Subscription = {
  __typename?: 'Subscription'
  onEmailMessageCreated: SealedEmailMessage
  onEmailMessageDeleted: SealedEmailMessage
}

export type SubscriptionOnEmailMessageCreatedArgs = {
  owner: Scalars['String']
}

export type SubscriptionOnEmailMessageDeletedArgs = {
  owner: Scalars['ID']
}

export type SupportedDomains = {
  __typename?: 'SupportedDomains'
  domains: Array<Scalars['String']>
}

export type UnblockEmailAddressesInput = {
  owner: Scalars['ID']
  unblockedAddresses: Array<Scalars['String']>
}

export type UpdateEmailAddressMetadataInput = {
  id: Scalars['ID']
  values: EmailAddressMetadataUpdateValuesInput
}

export type UpdateEmailMessagesInput = {
  messageIds: Array<Scalars['ID']>
  values: EmailMessageUpdateValuesInput
}

export type UpdateEmailMessagesResult = {
  __typename?: 'UpdateEmailMessagesResult'
  failedMessageIds?: Maybe<Array<Scalars['ID']>>
  status: UpdateEmailMessagesStatus
  successMessageIds?: Maybe<Array<Scalars['ID']>>
}

export enum UpdateEmailMessagesStatus {
  Failed = 'FAILED',
  Partial = 'PARTIAL',
  Success = 'SUCCESS',
}

export type BlockedAddressFragment = {
  __typename?: 'BlockedEmailAddress'
  owner: string
  version: number
  createdAtEpochMs: number
  updatedAtEpochMs: number
  hashAlgorithm: BlockedAddressHashAlgorithm
  hashedBlockedValue: string
  owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
  sealedValue: {
    __typename?: 'SealedAttribute'
    algorithm: string
    keyId: string
    plainTextType: string
    base64EncodedSealedData: string
  }
}

export type BlockAddressesResultFragment = {
  __typename?: 'BlockEmailAddressesBulkUpdateResult'
  status: UpdateEmailMessagesStatus
  failedAddresses?: Array<string> | null
  successAddresses?: Array<string> | null
}

export type EmailAddressWithoutFoldersFragment = {
  __typename?: 'EmailAddress'
  id: string
  owner: string
  identityId: string
  keyRingId: string
  keyIds: Array<string>
  version: number
  createdAtEpochMs: number
  updatedAtEpochMs: number
  lastReceivedAtEpochMs?: number | null
  emailAddress: string
  size: number
  owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
  alias?: {
    __typename?: 'SealedAttribute'
    algorithm: string
    keyId: string
    plainTextType: string
    base64EncodedSealedData: string
  } | null
}

export type EmailAddressFragment = {
  __typename?: 'EmailAddress'
  id: string
  owner: string
  identityId: string
  keyRingId: string
  keyIds: Array<string>
  version: number
  createdAtEpochMs: number
  updatedAtEpochMs: number
  lastReceivedAtEpochMs?: number | null
  emailAddress: string
  size: number
  folders: Array<{
    __typename?: 'EmailFolder'
    id: string
    owner: string
    version: number
    createdAtEpochMs: number
    updatedAtEpochMs: number
    emailAddressId: string
    folderName: string
    size: number
    unseenCount: number
    ttl?: number | null
    owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
    customFolderName?: {
      __typename?: 'SealedAttribute'
      algorithm: string
      keyId: string
      plainTextType: string
      base64EncodedSealedData: string
    } | null
  }>
  owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
  alias?: {
    __typename?: 'SealedAttribute'
    algorithm: string
    keyId: string
    plainTextType: string
    base64EncodedSealedData: string
  } | null
}

export type EmailAddressPublicInfoFragment = {
  __typename?: 'EmailAddressPublicInfo'
  emailAddress: string
  publicKey: string
}

export type EmailConfigurationDataFragment = {
  __typename?: 'EmailConfigurationData'
  deleteEmailMessagesLimit: number
  updateEmailMessagesLimit: number
  emailMessageMaxInboundMessageSize: number
  emailMessageMaxOutboundMessageSize: number
}

export type EmailFolderFragment = {
  __typename?: 'EmailFolder'
  id: string
  owner: string
  version: number
  createdAtEpochMs: number
  updatedAtEpochMs: number
  emailAddressId: string
  folderName: string
  size: number
  unseenCount: number
  ttl?: number | null
  owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
  customFolderName?: {
    __typename?: 'SealedAttribute'
    algorithm: string
    keyId: string
    plainTextType: string
    base64EncodedSealedData: string
  } | null
}

export type OwnerFragment = { __typename?: 'Owner'; id: string; issuer: string }

export type PaginatedPublicKeyFragment = {
  __typename?: 'PaginatedPublicKey'
  nextToken?: string | null
  items: Array<{
    __typename?: 'PublicKey'
    id: string
    keyId: string
    keyRingId: string
    algorithm: string
    keyFormat?: KeyFormat | null
    publicKey: string
    owner: string
    version: number
    createdAtEpochMs: number
    updatedAtEpochMs: number
  }>
}

export type PublicKeyFragment = {
  __typename?: 'PublicKey'
  id: string
  keyId: string
  keyRingId: string
  algorithm: string
  keyFormat?: KeyFormat | null
  publicKey: string
  owner: string
  version: number
  createdAtEpochMs: number
  updatedAtEpochMs: number
}

export type SealedAttributeFragment = {
  __typename?: 'SealedAttribute'
  algorithm: string
  keyId: string
  plainTextType: string
  base64EncodedSealedData: string
}

export type SealedEmailMessageFragment = {
  __typename?: 'SealedEmailMessage'
  id: string
  owner: string
  emailAddressId: string
  version: number
  createdAtEpochMs: number
  updatedAtEpochMs: number
  sortDateEpochMs: number
  folderId: string
  previousFolderId?: string | null
  direction: EmailMessageDirection
  seen: boolean
  state: EmailMessageState
  clientRefId?: string | null
  size: number
  owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
  rfc822Header: {
    __typename?: 'SealedAttribute'
    algorithm: string
    keyId: string
    plainTextType: string
    base64EncodedSealedData: string
  }
}

export type UpdateEmailMessagesResultFragment = {
  __typename?: 'UpdateEmailMessagesResult'
  status: UpdateEmailMessagesStatus
  successMessageIds?: Array<string> | null
  failedMessageIds?: Array<string> | null
}

export type DeleteEmailMessagesMutationVariables = Exact<{
  input: DeleteEmailMessagesInput
}>

export type DeleteEmailMessagesMutation = {
  __typename?: 'Mutation'
  deleteEmailMessages: Array<string>
}

export type ProvisionEmailAddressMutationVariables = Exact<{
  input: ProvisionEmailAddressInput
}>

export type ProvisionEmailAddressMutation = {
  __typename?: 'Mutation'
  provisionEmailAddress: {
    __typename?: 'EmailAddress'
    id: string
    owner: string
    identityId: string
    keyRingId: string
    keyIds: Array<string>
    version: number
    createdAtEpochMs: number
    updatedAtEpochMs: number
    lastReceivedAtEpochMs?: number | null
    emailAddress: string
    size: number
    folders: Array<{
      __typename?: 'EmailFolder'
      id: string
      owner: string
      version: number
      createdAtEpochMs: number
      updatedAtEpochMs: number
      emailAddressId: string
      folderName: string
      size: number
      unseenCount: number
      ttl?: number | null
      owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
      customFolderName?: {
        __typename?: 'SealedAttribute'
        algorithm: string
        keyId: string
        plainTextType: string
        base64EncodedSealedData: string
      } | null
    }>
    owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
    alias?: {
      __typename?: 'SealedAttribute'
      algorithm: string
      keyId: string
      plainTextType: string
      base64EncodedSealedData: string
    } | null
  }
}

export type DeprovisionEmailAddressMutationVariables = Exact<{
  input: DeprovisionEmailAddressInput
}>

export type DeprovisionEmailAddressMutation = {
  __typename?: 'Mutation'
  deprovisionEmailAddress: {
    __typename?: 'EmailAddress'
    id: string
    owner: string
    identityId: string
    keyRingId: string
    keyIds: Array<string>
    version: number
    createdAtEpochMs: number
    updatedAtEpochMs: number
    lastReceivedAtEpochMs?: number | null
    emailAddress: string
    size: number
    owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
    alias?: {
      __typename?: 'SealedAttribute'
      algorithm: string
      keyId: string
      plainTextType: string
      base64EncodedSealedData: string
    } | null
  }
}

export type UpdateEmailAddressMetadataMutationVariables = Exact<{
  input: UpdateEmailAddressMetadataInput
}>

export type UpdateEmailAddressMetadataMutation = {
  __typename?: 'Mutation'
  updateEmailAddressMetadata: string
}

export type SendEmailMessageMutationVariables = Exact<{
  input: SendEmailMessageInput
}>

export type SendEmailMessageMutation = {
  __typename?: 'Mutation'
  sendEmailMessage: string
}

export type UpdateEmailMessagesMutationVariables = Exact<{
  input: UpdateEmailMessagesInput
}>

export type UpdateEmailMessagesMutation = {
  __typename?: 'Mutation'
  updateEmailMessages: {
    __typename?: 'UpdateEmailMessagesResult'
    status: UpdateEmailMessagesStatus
    successMessageIds?: Array<string> | null
    failedMessageIds?: Array<string> | null
  }
}

export type DeleteEmailMessageMutationVariables = Exact<{
  input: DeleteEmailMessageInput
}>

export type DeleteEmailMessageMutation = {
  __typename?: 'Mutation'
  deleteEmailMessage: string
}

export type CreateCustomEmailFolderMutationVariables = Exact<{
  input: CreateCustomEmailFolderInput
}>

export type CreateCustomEmailFolderMutation = {
  __typename?: 'Mutation'
  createCustomEmailFolder: {
    __typename?: 'EmailFolder'
    id: string
    owner: string
    version: number
    createdAtEpochMs: number
    updatedAtEpochMs: number
    emailAddressId: string
    folderName: string
    size: number
    unseenCount: number
    ttl?: number | null
    owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
    customFolderName?: {
      __typename?: 'SealedAttribute'
      algorithm: string
      keyId: string
      plainTextType: string
      base64EncodedSealedData: string
    } | null
  }
}

export type BlockEmailAddressesMutationVariables = Exact<{
  input: BlockEmailAddressesInput
}>

export type BlockEmailAddressesMutation = {
  __typename?: 'Mutation'
  blockEmailAddresses: {
    __typename?: 'BlockEmailAddressesBulkUpdateResult'
    status: UpdateEmailMessagesStatus
    failedAddresses?: Array<string> | null
    successAddresses?: Array<string> | null
  }
}

export type UnblockEmailAddressesMutationVariables = Exact<{
  input: UnblockEmailAddressesInput
}>

export type UnblockEmailAddressesMutation = {
  __typename?: 'Mutation'
  unblockEmailAddresses: {
    __typename?: 'BlockEmailAddressesBulkUpdateResult'
    status: UpdateEmailMessagesStatus
    failedAddresses?: Array<string> | null
    successAddresses?: Array<string> | null
  }
}

export type CreatePublicKeyForEmailMutationVariables = Exact<{
  input: CreatePublicKeyInput
}>

export type CreatePublicKeyForEmailMutation = {
  __typename?: 'Mutation'
  createPublicKeyForEmail: {
    __typename?: 'PublicKey'
    id: string
    keyId: string
    keyRingId: string
    algorithm: string
    keyFormat?: KeyFormat | null
    publicKey: string
    owner: string
    version: number
    createdAtEpochMs: number
    updatedAtEpochMs: number
  }
}

export type GetEmailConfigQueryVariables = Exact<{ [key: string]: never }>

export type GetEmailConfigQuery = {
  __typename?: 'Query'
  getEmailConfig: {
    __typename?: 'EmailConfigurationData'
    deleteEmailMessagesLimit: number
    updateEmailMessagesLimit: number
    emailMessageMaxInboundMessageSize: number
    emailMessageMaxOutboundMessageSize: number
  }
}

export type GetEmailDomainsQueryVariables = Exact<{ [key: string]: never }>

export type GetEmailDomainsQuery = {
  __typename?: 'Query'
  getEmailDomains: { __typename?: 'SupportedDomains'; domains: Array<string> }
}

export type CheckEmailAddressAvailabilityQueryVariables = Exact<{
  input: CheckEmailAddressAvailabilityInput
}>

export type CheckEmailAddressAvailabilityQuery = {
  __typename?: 'Query'
  checkEmailAddressAvailability: {
    __typename?: 'AvailableAddresses'
    addresses: Array<string>
  }
}

export type GetEmailAddressQueryVariables = Exact<{
  id: Scalars['String']
}>

export type GetEmailAddressQuery = {
  __typename?: 'Query'
  getEmailAddress?: {
    __typename?: 'EmailAddress'
    id: string
    owner: string
    identityId: string
    keyRingId: string
    keyIds: Array<string>
    version: number
    createdAtEpochMs: number
    updatedAtEpochMs: number
    lastReceivedAtEpochMs?: number | null
    emailAddress: string
    size: number
    folders: Array<{
      __typename?: 'EmailFolder'
      id: string
      owner: string
      version: number
      createdAtEpochMs: number
      updatedAtEpochMs: number
      emailAddressId: string
      folderName: string
      size: number
      unseenCount: number
      ttl?: number | null
      owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
      customFolderName?: {
        __typename?: 'SealedAttribute'
        algorithm: string
        keyId: string
        plainTextType: string
        base64EncodedSealedData: string
      } | null
    }>
    owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
    alias?: {
      __typename?: 'SealedAttribute'
      algorithm: string
      keyId: string
      plainTextType: string
      base64EncodedSealedData: string
    } | null
  } | null
}

export type ListEmailAddressesQueryVariables = Exact<{
  input: ListEmailAddressesInput
}>

export type ListEmailAddressesQuery = {
  __typename?: 'Query'
  listEmailAddresses: {
    __typename?: 'EmailAddressConnection'
    nextToken?: string | null
    items: Array<{
      __typename?: 'EmailAddress'
      id: string
      owner: string
      identityId: string
      keyRingId: string
      keyIds: Array<string>
      version: number
      createdAtEpochMs: number
      updatedAtEpochMs: number
      lastReceivedAtEpochMs?: number | null
      emailAddress: string
      size: number
      folders: Array<{
        __typename?: 'EmailFolder'
        id: string
        owner: string
        version: number
        createdAtEpochMs: number
        updatedAtEpochMs: number
        emailAddressId: string
        folderName: string
        size: number
        unseenCount: number
        ttl?: number | null
        owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
        customFolderName?: {
          __typename?: 'SealedAttribute'
          algorithm: string
          keyId: string
          plainTextType: string
          base64EncodedSealedData: string
        } | null
      }>
      owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
      alias?: {
        __typename?: 'SealedAttribute'
        algorithm: string
        keyId: string
        plainTextType: string
        base64EncodedSealedData: string
      } | null
    }>
  }
}

export type ListEmailAddressesForSudoIdQueryVariables = Exact<{
  input: ListEmailAddressesForSudoIdInput
}>

export type ListEmailAddressesForSudoIdQuery = {
  __typename?: 'Query'
  listEmailAddressesForSudoId: {
    __typename?: 'EmailAddressConnection'
    nextToken?: string | null
    items: Array<{
      __typename?: 'EmailAddress'
      id: string
      owner: string
      identityId: string
      keyRingId: string
      keyIds: Array<string>
      version: number
      createdAtEpochMs: number
      updatedAtEpochMs: number
      lastReceivedAtEpochMs?: number | null
      emailAddress: string
      size: number
      folders: Array<{
        __typename?: 'EmailFolder'
        id: string
        owner: string
        version: number
        createdAtEpochMs: number
        updatedAtEpochMs: number
        emailAddressId: string
        folderName: string
        size: number
        unseenCount: number
        ttl?: number | null
        owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
        customFolderName?: {
          __typename?: 'SealedAttribute'
          algorithm: string
          keyId: string
          plainTextType: string
          base64EncodedSealedData: string
        } | null
      }>
      owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
      alias?: {
        __typename?: 'SealedAttribute'
        algorithm: string
        keyId: string
        plainTextType: string
        base64EncodedSealedData: string
      } | null
    }>
  }
}

export type LookupEmailAddressesPublicInfoQueryVariables = Exact<{
  input: LookupEmailAddressesPublicInfoInput
}>

export type LookupEmailAddressesPublicInfoQuery = {
  __typename?: 'Query'
  lookupEmailAddressesPublicInfo: {
    __typename?: 'LookupEmailAddressesPublicInfoResponse'
    items: Array<{
      __typename?: 'EmailAddressPublicInfo'
      emailAddress: string
      publicKey: string
    }>
  }
}

export type ListEmailFoldersForEmailAddressIdQueryVariables = Exact<{
  input: ListEmailFoldersForEmailAddressIdInput
}>

export type ListEmailFoldersForEmailAddressIdQuery = {
  __typename?: 'Query'
  listEmailFoldersForEmailAddressId: {
    __typename?: 'EmailFolderConnection'
    nextToken?: string | null
    items: Array<{
      __typename?: 'EmailFolder'
      id: string
      owner: string
      version: number
      createdAtEpochMs: number
      updatedAtEpochMs: number
      emailAddressId: string
      folderName: string
      size: number
      unseenCount: number
      ttl?: number | null
      owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
      customFolderName?: {
        __typename?: 'SealedAttribute'
        algorithm: string
        keyId: string
        plainTextType: string
        base64EncodedSealedData: string
      } | null
    }>
  }
}

export type GetEmailMessageQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type GetEmailMessageQuery = {
  __typename?: 'Query'
  getEmailMessage?: {
    __typename?: 'SealedEmailMessage'
    id: string
    owner: string
    emailAddressId: string
    version: number
    createdAtEpochMs: number
    updatedAtEpochMs: number
    sortDateEpochMs: number
    folderId: string
    previousFolderId?: string | null
    direction: EmailMessageDirection
    seen: boolean
    state: EmailMessageState
    clientRefId?: string | null
    size: number
    owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
    rfc822Header: {
      __typename?: 'SealedAttribute'
      algorithm: string
      keyId: string
      plainTextType: string
      base64EncodedSealedData: string
    }
  } | null
}

export type ListEmailMessagesForEmailAddressIdQueryVariables = Exact<{
  input: ListEmailMessagesForEmailAddressIdInput
}>

export type ListEmailMessagesForEmailAddressIdQuery = {
  __typename?: 'Query'
  listEmailMessagesForEmailAddressId: {
    __typename?: 'EmailMessageConnection'
    nextToken?: string | null
    items: Array<{
      __typename?: 'SealedEmailMessage'
      id: string
      owner: string
      emailAddressId: string
      version: number
      createdAtEpochMs: number
      updatedAtEpochMs: number
      sortDateEpochMs: number
      folderId: string
      previousFolderId?: string | null
      direction: EmailMessageDirection
      seen: boolean
      state: EmailMessageState
      clientRefId?: string | null
      size: number
      owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
      rfc822Header: {
        __typename?: 'SealedAttribute'
        algorithm: string
        keyId: string
        plainTextType: string
        base64EncodedSealedData: string
      }
    }>
  }
}

export type ListEmailMessagesForEmailFolderIdQueryVariables = Exact<{
  input: ListEmailMessagesForEmailFolderIdInput
}>

export type ListEmailMessagesForEmailFolderIdQuery = {
  __typename?: 'Query'
  listEmailMessagesForEmailFolderId: {
    __typename?: 'EmailMessageConnection'
    nextToken?: string | null
    items: Array<{
      __typename?: 'SealedEmailMessage'
      id: string
      owner: string
      emailAddressId: string
      version: number
      createdAtEpochMs: number
      updatedAtEpochMs: number
      sortDateEpochMs: number
      folderId: string
      previousFolderId?: string | null
      direction: EmailMessageDirection
      seen: boolean
      state: EmailMessageState
      clientRefId?: string | null
      size: number
      owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
      rfc822Header: {
        __typename?: 'SealedAttribute'
        algorithm: string
        keyId: string
        plainTextType: string
        base64EncodedSealedData: string
      }
    }>
  }
}

export type GetKeyRingForEmailQueryVariables = Exact<{
  keyRingId: Scalars['String']
  limit?: InputMaybe<Scalars['Int']>
  nextToken?: InputMaybe<Scalars['String']>
}>

export type GetKeyRingForEmailQuery = {
  __typename?: 'Query'
  getKeyRingForEmail: {
    __typename?: 'PaginatedPublicKey'
    nextToken?: string | null
    items: Array<{
      __typename?: 'PublicKey'
      id: string
      keyId: string
      keyRingId: string
      algorithm: string
      keyFormat?: KeyFormat | null
      publicKey: string
      owner: string
      version: number
      createdAtEpochMs: number
      updatedAtEpochMs: number
    }>
  }
}

export type GetPublicKeyForEmailQueryVariables = Exact<{
  keyId: Scalars['String']
}>

export type GetPublicKeyForEmailQuery = {
  __typename?: 'Query'
  getPublicKeyForEmail?: {
    __typename?: 'PublicKey'
    id: string
    keyId: string
    keyRingId: string
    algorithm: string
    keyFormat?: KeyFormat | null
    publicKey: string
    owner: string
    version: number
    createdAtEpochMs: number
    updatedAtEpochMs: number
  } | null
}

export type GetPublicKeysForEmailQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']>
  nextToken?: InputMaybe<Scalars['String']>
}>

export type GetPublicKeysForEmailQuery = {
  __typename?: 'Query'
  getPublicKeysForEmail: {
    __typename?: 'PaginatedPublicKey'
    nextToken?: string | null
    items: Array<{
      __typename?: 'PublicKey'
      id: string
      keyId: string
      keyRingId: string
      algorithm: string
      keyFormat?: KeyFormat | null
      publicKey: string
      owner: string
      version: number
      createdAtEpochMs: number
      updatedAtEpochMs: number
    }>
  }
}

export type GetEmailAddressBlocklistQueryVariables = Exact<{
  input: GetEmailAddressBlocklistInput
}>

export type GetEmailAddressBlocklistQuery = {
  __typename?: 'Query'
  getEmailAddressBlocklist: {
    __typename?: 'GetEmailAddressBlocklistResponse'
    sealedBlockedAddresses: Array<{
      __typename?: 'SealedAttribute'
      algorithm: string
      keyId: string
      plainTextType: string
      base64EncodedSealedData: string
    }>
  }
}

export type OnEmailMessageDeletedSubscriptionVariables = Exact<{
  owner: Scalars['ID']
}>

export type OnEmailMessageDeletedSubscription = {
  __typename?: 'Subscription'
  onEmailMessageDeleted: {
    __typename?: 'SealedEmailMessage'
    id: string
    owner: string
    emailAddressId: string
    version: number
    createdAtEpochMs: number
    updatedAtEpochMs: number
    sortDateEpochMs: number
    folderId: string
    previousFolderId?: string | null
    direction: EmailMessageDirection
    seen: boolean
    state: EmailMessageState
    clientRefId?: string | null
    size: number
    owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
    rfc822Header: {
      __typename?: 'SealedAttribute'
      algorithm: string
      keyId: string
      plainTextType: string
      base64EncodedSealedData: string
    }
  }
}

export type OnEmailMessageCreatedSubscriptionVariables = Exact<{
  owner: Scalars['String']
}>

export type OnEmailMessageCreatedSubscription = {
  __typename?: 'Subscription'
  onEmailMessageCreated: {
    __typename?: 'SealedEmailMessage'
    id: string
    owner: string
    emailAddressId: string
    version: number
    createdAtEpochMs: number
    updatedAtEpochMs: number
    sortDateEpochMs: number
    folderId: string
    previousFolderId?: string | null
    direction: EmailMessageDirection
    seen: boolean
    state: EmailMessageState
    clientRefId?: string | null
    size: number
    owners: Array<{ __typename?: 'Owner'; id: string; issuer: string }>
    rfc822Header: {
      __typename?: 'SealedAttribute'
      algorithm: string
      keyId: string
      plainTextType: string
      base64EncodedSealedData: string
    }
  }
}

export const SealedAttributeFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedAttribute' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedAttribute' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'plainTextType' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'base64EncodedSealedData' },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<SealedAttributeFragment, unknown>
export const BlockedAddressFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'BlockedAddress' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'BlockedEmailAddress' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'hashAlgorithm' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'hashedBlockedValue' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'sealedValue' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedAttribute' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedAttribute' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedAttribute' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'plainTextType' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'base64EncodedSealedData' },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<BlockedAddressFragment, unknown>
export const BlockAddressesResultFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'BlockAddressesResult' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'BlockEmailAddressesBulkUpdateResult' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'status' } },
          { kind: 'Field', name: { kind: 'Name', value: 'failedAddresses' } },
          { kind: 'Field', name: { kind: 'Name', value: 'successAddresses' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<BlockAddressesResultFragment, unknown>
export const EmailAddressWithoutFoldersFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailAddressWithoutFolders' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailAddress' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'identityId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyRingId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyIds' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'lastReceivedAtEpochMs' },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddress' } },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'alias' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedAttribute' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedAttribute' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedAttribute' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'plainTextType' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'base64EncodedSealedData' },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EmailAddressWithoutFoldersFragment, unknown>
export const EmailFolderFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailFolder' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailFolder' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddressId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'folderName' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'customFolderName' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedAttribute' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
          { kind: 'Field', name: { kind: 'Name', value: 'unseenCount' } },
          { kind: 'Field', name: { kind: 'Name', value: 'ttl' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedAttribute' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedAttribute' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'plainTextType' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'base64EncodedSealedData' },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EmailFolderFragment, unknown>
export const EmailAddressFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailAddress' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailAddress' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'EmailAddressWithoutFolders' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'folders' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EmailFolder' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedAttribute' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedAttribute' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'plainTextType' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'base64EncodedSealedData' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailAddressWithoutFolders' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailAddress' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'identityId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyRingId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyIds' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'lastReceivedAtEpochMs' },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddress' } },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'alias' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedAttribute' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailFolder' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailFolder' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddressId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'folderName' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'customFolderName' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedAttribute' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
          { kind: 'Field', name: { kind: 'Name', value: 'unseenCount' } },
          { kind: 'Field', name: { kind: 'Name', value: 'ttl' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EmailAddressFragment, unknown>
export const EmailAddressPublicInfoFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailAddressPublicInfo' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailAddressPublicInfo' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddress' } },
          { kind: 'Field', name: { kind: 'Name', value: 'publicKey' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EmailAddressPublicInfoFragment, unknown>
export const EmailConfigurationDataFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailConfigurationData' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailConfigurationData' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'deleteEmailMessagesLimit' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateEmailMessagesLimit' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'emailMessageMaxInboundMessageSize' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'emailMessageMaxOutboundMessageSize' },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EmailConfigurationDataFragment, unknown>
export const OwnerFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Owner' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Owner' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OwnerFragment, unknown>
export const PublicKeyFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PublicKey' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'PublicKey' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyRingId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyFormat' } },
          { kind: 'Field', name: { kind: 'Name', value: 'publicKey' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<PublicKeyFragment, unknown>
export const PaginatedPublicKeyFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PaginatedPublicKey' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'PaginatedPublicKey' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'items' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PublicKey' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'nextToken' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PublicKey' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'PublicKey' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyRingId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyFormat' } },
          { kind: 'Field', name: { kind: 'Name', value: 'publicKey' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<PaginatedPublicKeyFragment, unknown>
export const SealedEmailMessageFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedEmailMessage' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedEmailMessage' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddressId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'sortDateEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'folderId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'previousFolderId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'direction' } },
          { kind: 'Field', name: { kind: 'Name', value: 'seen' } },
          { kind: 'Field', name: { kind: 'Name', value: 'state' } },
          { kind: 'Field', name: { kind: 'Name', value: 'clientRefId' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'rfc822Header' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
                { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'plainTextType' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'base64EncodedSealedData' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<SealedEmailMessageFragment, unknown>
export const UpdateEmailMessagesResultFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'UpdateEmailMessagesResult' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'UpdateEmailMessagesResult' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'status' } },
          { kind: 'Field', name: { kind: 'Name', value: 'successMessageIds' } },
          { kind: 'Field', name: { kind: 'Name', value: 'failedMessageIds' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UpdateEmailMessagesResultFragment, unknown>
export const DeleteEmailMessagesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'DeleteEmailMessages' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'DeleteEmailMessagesInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'deleteEmailMessages' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  DeleteEmailMessagesMutation,
  DeleteEmailMessagesMutationVariables
>
export const ProvisionEmailAddressDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'ProvisionEmailAddress' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'ProvisionEmailAddressInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'provisionEmailAddress' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EmailAddress' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedAttribute' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedAttribute' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'plainTextType' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'base64EncodedSealedData' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailAddressWithoutFolders' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailAddress' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'identityId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyRingId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyIds' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'lastReceivedAtEpochMs' },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddress' } },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'alias' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedAttribute' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailFolder' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailFolder' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddressId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'folderName' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'customFolderName' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedAttribute' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
          { kind: 'Field', name: { kind: 'Name', value: 'unseenCount' } },
          { kind: 'Field', name: { kind: 'Name', value: 'ttl' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailAddress' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailAddress' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'EmailAddressWithoutFolders' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'folders' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EmailFolder' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  ProvisionEmailAddressMutation,
  ProvisionEmailAddressMutationVariables
>
export const DeprovisionEmailAddressDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'DeprovisionEmailAddress' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'DeprovisionEmailAddressInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'deprovisionEmailAddress' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EmailAddressWithoutFolders' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedAttribute' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedAttribute' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'plainTextType' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'base64EncodedSealedData' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailAddressWithoutFolders' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailAddress' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'identityId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyRingId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyIds' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'lastReceivedAtEpochMs' },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddress' } },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'alias' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedAttribute' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  DeprovisionEmailAddressMutation,
  DeprovisionEmailAddressMutationVariables
>
export const UpdateEmailAddressMetadataDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateEmailAddressMetadata' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UpdateEmailAddressMetadataInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateEmailAddressMetadata' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  UpdateEmailAddressMetadataMutation,
  UpdateEmailAddressMetadataMutationVariables
>
export const SendEmailMessageDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'SendEmailMessage' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'SendEmailMessageInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'sendEmailMessage' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  SendEmailMessageMutation,
  SendEmailMessageMutationVariables
>
export const UpdateEmailMessagesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateEmailMessages' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UpdateEmailMessagesInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateEmailMessages' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'UpdateEmailMessagesResult' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'UpdateEmailMessagesResult' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'UpdateEmailMessagesResult' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'status' } },
          { kind: 'Field', name: { kind: 'Name', value: 'successMessageIds' } },
          { kind: 'Field', name: { kind: 'Name', value: 'failedMessageIds' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  UpdateEmailMessagesMutation,
  UpdateEmailMessagesMutationVariables
>
export const DeleteEmailMessageDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'DeleteEmailMessage' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'DeleteEmailMessageInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'deleteEmailMessage' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  DeleteEmailMessageMutation,
  DeleteEmailMessageMutationVariables
>
export const CreateCustomEmailFolderDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateCustomEmailFolder' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateCustomEmailFolderInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createCustomEmailFolder' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EmailFolder' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedAttribute' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedAttribute' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'plainTextType' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'base64EncodedSealedData' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailFolder' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailFolder' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddressId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'folderName' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'customFolderName' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedAttribute' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
          { kind: 'Field', name: { kind: 'Name', value: 'unseenCount' } },
          { kind: 'Field', name: { kind: 'Name', value: 'ttl' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  CreateCustomEmailFolderMutation,
  CreateCustomEmailFolderMutationVariables
>
export const BlockEmailAddressesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'BlockEmailAddresses' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'BlockEmailAddressesInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'blockEmailAddresses' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'BlockAddressesResult' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'BlockAddressesResult' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'BlockEmailAddressesBulkUpdateResult' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'status' } },
          { kind: 'Field', name: { kind: 'Name', value: 'failedAddresses' } },
          { kind: 'Field', name: { kind: 'Name', value: 'successAddresses' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  BlockEmailAddressesMutation,
  BlockEmailAddressesMutationVariables
>
export const UnblockEmailAddressesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UnblockEmailAddresses' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UnblockEmailAddressesInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'unblockEmailAddresses' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'BlockAddressesResult' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'BlockAddressesResult' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'BlockEmailAddressesBulkUpdateResult' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'status' } },
          { kind: 'Field', name: { kind: 'Name', value: 'failedAddresses' } },
          { kind: 'Field', name: { kind: 'Name', value: 'successAddresses' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  UnblockEmailAddressesMutation,
  UnblockEmailAddressesMutationVariables
>
export const CreatePublicKeyForEmailDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreatePublicKeyForEmail' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreatePublicKeyInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createPublicKeyForEmail' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PublicKey' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PublicKey' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'PublicKey' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyRingId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyFormat' } },
          { kind: 'Field', name: { kind: 'Name', value: 'publicKey' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  CreatePublicKeyForEmailMutation,
  CreatePublicKeyForEmailMutationVariables
>
export const GetEmailConfigDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetEmailConfig' },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getEmailConfig' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EmailConfigurationData' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailConfigurationData' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailConfigurationData' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'deleteEmailMessagesLimit' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateEmailMessagesLimit' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'emailMessageMaxInboundMessageSize' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'emailMessageMaxOutboundMessageSize' },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<GetEmailConfigQuery, GetEmailConfigQueryVariables>
export const GetEmailDomainsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetEmailDomains' },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getEmailDomains' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'domains' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  GetEmailDomainsQuery,
  GetEmailDomainsQueryVariables
>
export const CheckEmailAddressAvailabilityDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'CheckEmailAddressAvailability' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: {
                kind: 'Name',
                value: 'CheckEmailAddressAvailabilityInput',
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'checkEmailAddressAvailability' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'addresses' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  CheckEmailAddressAvailabilityQuery,
  CheckEmailAddressAvailabilityQueryVariables
>
export const GetEmailAddressDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetEmailAddress' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getEmailAddress' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EmailAddress' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedAttribute' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedAttribute' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'plainTextType' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'base64EncodedSealedData' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailAddressWithoutFolders' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailAddress' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'identityId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyRingId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyIds' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'lastReceivedAtEpochMs' },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddress' } },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'alias' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedAttribute' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailFolder' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailFolder' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddressId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'folderName' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'customFolderName' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedAttribute' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
          { kind: 'Field', name: { kind: 'Name', value: 'unseenCount' } },
          { kind: 'Field', name: { kind: 'Name', value: 'ttl' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailAddress' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailAddress' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'EmailAddressWithoutFolders' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'folders' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EmailFolder' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  GetEmailAddressQuery,
  GetEmailAddressQueryVariables
>
export const ListEmailAddressesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ListEmailAddresses' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'ListEmailAddressesInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'listEmailAddresses' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'items' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'EmailAddress' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'nextToken' } },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedAttribute' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedAttribute' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'plainTextType' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'base64EncodedSealedData' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailAddressWithoutFolders' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailAddress' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'identityId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyRingId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyIds' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'lastReceivedAtEpochMs' },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddress' } },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'alias' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedAttribute' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailFolder' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailFolder' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddressId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'folderName' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'customFolderName' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedAttribute' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
          { kind: 'Field', name: { kind: 'Name', value: 'unseenCount' } },
          { kind: 'Field', name: { kind: 'Name', value: 'ttl' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailAddress' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailAddress' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'EmailAddressWithoutFolders' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'folders' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EmailFolder' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  ListEmailAddressesQuery,
  ListEmailAddressesQueryVariables
>
export const ListEmailAddressesForSudoIdDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ListEmailAddressesForSudoId' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'ListEmailAddressesForSudoIdInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'listEmailAddressesForSudoId' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'items' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'EmailAddress' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'nextToken' } },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedAttribute' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedAttribute' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'plainTextType' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'base64EncodedSealedData' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailAddressWithoutFolders' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailAddress' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'identityId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyRingId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyIds' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'lastReceivedAtEpochMs' },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddress' } },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'alias' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedAttribute' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailFolder' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailFolder' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddressId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'folderName' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'customFolderName' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedAttribute' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
          { kind: 'Field', name: { kind: 'Name', value: 'unseenCount' } },
          { kind: 'Field', name: { kind: 'Name', value: 'ttl' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailAddress' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailAddress' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'EmailAddressWithoutFolders' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'folders' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EmailFolder' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  ListEmailAddressesForSudoIdQuery,
  ListEmailAddressesForSudoIdQueryVariables
>
export const LookupEmailAddressesPublicInfoDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'LookupEmailAddressesPublicInfo' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: {
                kind: 'Name',
                value: 'LookupEmailAddressesPublicInfoInput',
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'lookupEmailAddressesPublicInfo' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'items' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'EmailAddressPublicInfo' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailAddressPublicInfo' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailAddressPublicInfo' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddress' } },
          { kind: 'Field', name: { kind: 'Name', value: 'publicKey' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  LookupEmailAddressesPublicInfoQuery,
  LookupEmailAddressesPublicInfoQueryVariables
>
export const ListEmailFoldersForEmailAddressIdDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ListEmailFoldersForEmailAddressId' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: {
                kind: 'Name',
                value: 'ListEmailFoldersForEmailAddressIdInput',
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'listEmailFoldersForEmailAddressId' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'items' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'EmailFolder' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'nextToken' } },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedAttribute' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedAttribute' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'plainTextType' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'base64EncodedSealedData' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EmailFolder' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EmailFolder' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddressId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'folderName' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'customFolderName' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedAttribute' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
          { kind: 'Field', name: { kind: 'Name', value: 'unseenCount' } },
          { kind: 'Field', name: { kind: 'Name', value: 'ttl' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  ListEmailFoldersForEmailAddressIdQuery,
  ListEmailFoldersForEmailAddressIdQueryVariables
>
export const GetEmailMessageDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetEmailMessage' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getEmailMessage' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedEmailMessage' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedEmailMessage' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedEmailMessage' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddressId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'sortDateEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'folderId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'previousFolderId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'direction' } },
          { kind: 'Field', name: { kind: 'Name', value: 'seen' } },
          { kind: 'Field', name: { kind: 'Name', value: 'state' } },
          { kind: 'Field', name: { kind: 'Name', value: 'clientRefId' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'rfc822Header' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
                { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'plainTextType' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'base64EncodedSealedData' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  GetEmailMessageQuery,
  GetEmailMessageQueryVariables
>
export const ListEmailMessagesForEmailAddressIdDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ListEmailMessagesForEmailAddressId' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: {
                kind: 'Name',
                value: 'ListEmailMessagesForEmailAddressIdInput',
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'listEmailMessagesForEmailAddressId' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'items' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'SealedEmailMessage' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'nextToken' } },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedEmailMessage' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedEmailMessage' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddressId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'sortDateEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'folderId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'previousFolderId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'direction' } },
          { kind: 'Field', name: { kind: 'Name', value: 'seen' } },
          { kind: 'Field', name: { kind: 'Name', value: 'state' } },
          { kind: 'Field', name: { kind: 'Name', value: 'clientRefId' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'rfc822Header' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
                { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'plainTextType' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'base64EncodedSealedData' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  ListEmailMessagesForEmailAddressIdQuery,
  ListEmailMessagesForEmailAddressIdQueryVariables
>
export const ListEmailMessagesForEmailFolderIdDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ListEmailMessagesForEmailFolderId' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: {
                kind: 'Name',
                value: 'ListEmailMessagesForEmailFolderIdInput',
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'listEmailMessagesForEmailFolderId' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'items' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'SealedEmailMessage' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'nextToken' } },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedEmailMessage' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedEmailMessage' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddressId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'sortDateEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'folderId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'previousFolderId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'direction' } },
          { kind: 'Field', name: { kind: 'Name', value: 'seen' } },
          { kind: 'Field', name: { kind: 'Name', value: 'state' } },
          { kind: 'Field', name: { kind: 'Name', value: 'clientRefId' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'rfc822Header' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
                { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'plainTextType' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'base64EncodedSealedData' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  ListEmailMessagesForEmailFolderIdQuery,
  ListEmailMessagesForEmailFolderIdQueryVariables
>
export const GetKeyRingForEmailDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetKeyRingForEmail' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'keyRingId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'nextToken' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getKeyRingForEmail' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'keyRingId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'keyRingId' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'nextToken' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'nextToken' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PaginatedPublicKey' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PublicKey' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'PublicKey' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyRingId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyFormat' } },
          { kind: 'Field', name: { kind: 'Name', value: 'publicKey' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PaginatedPublicKey' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'PaginatedPublicKey' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'items' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PublicKey' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'nextToken' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  GetKeyRingForEmailQuery,
  GetKeyRingForEmailQueryVariables
>
export const GetPublicKeyForEmailDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetPublicKeyForEmail' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'keyId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getPublicKeyForEmail' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'keyId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'keyId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PublicKey' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PublicKey' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'PublicKey' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyRingId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyFormat' } },
          { kind: 'Field', name: { kind: 'Name', value: 'publicKey' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  GetPublicKeyForEmailQuery,
  GetPublicKeyForEmailQueryVariables
>
export const GetPublicKeysForEmailDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetPublicKeysForEmail' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'nextToken' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getPublicKeysForEmail' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'nextToken' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'nextToken' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PaginatedPublicKey' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PublicKey' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'PublicKey' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyRingId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyFormat' } },
          { kind: 'Field', name: { kind: 'Name', value: 'publicKey' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PaginatedPublicKey' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'PaginatedPublicKey' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'items' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PublicKey' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'nextToken' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  GetPublicKeysForEmailQuery,
  GetPublicKeysForEmailQueryVariables
>
export const GetEmailAddressBlocklistDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetEmailAddressBlocklist' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'GetEmailAddressBlocklistInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getEmailAddressBlocklist' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'sealedBlockedAddresses' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'SealedAttribute' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedAttribute' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedAttribute' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
          { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'plainTextType' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'base64EncodedSealedData' },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  GetEmailAddressBlocklistQuery,
  GetEmailAddressBlocklistQueryVariables
>
export const OnEmailMessageDeletedDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'subscription',
      name: { kind: 'Name', value: 'OnEmailMessageDeleted' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'owner' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'onEmailMessageDeleted' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'owner' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'owner' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedEmailMessage' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedEmailMessage' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedEmailMessage' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddressId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'sortDateEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'folderId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'previousFolderId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'direction' } },
          { kind: 'Field', name: { kind: 'Name', value: 'seen' } },
          { kind: 'Field', name: { kind: 'Name', value: 'state' } },
          { kind: 'Field', name: { kind: 'Name', value: 'clientRefId' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'rfc822Header' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
                { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'plainTextType' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'base64EncodedSealedData' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  OnEmailMessageDeletedSubscription,
  OnEmailMessageDeletedSubscriptionVariables
>
export const OnEmailMessageCreatedDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'subscription',
      name: { kind: 'Name', value: 'onEmailMessageCreated' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'owner' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'onEmailMessageCreated' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'owner' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'owner' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'SealedEmailMessage' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'SealedEmailMessage' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'SealedEmailMessage' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'owners' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'emailAddressId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'sortDateEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'folderId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'previousFolderId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'direction' } },
          { kind: 'Field', name: { kind: 'Name', value: 'seen' } },
          { kind: 'Field', name: { kind: 'Name', value: 'state' } },
          { kind: 'Field', name: { kind: 'Name', value: 'clientRefId' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'rfc822Header' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'algorithm' } },
                { kind: 'Field', name: { kind: 'Name', value: 'keyId' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'plainTextType' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'base64EncodedSealedData' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'size' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  OnEmailMessageCreatedSubscription,
  OnEmailMessageCreatedSubscriptionVariables
>
